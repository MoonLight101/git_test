* {
    padding: 0;
    margin: 0;
    font-size: 40px;
    box-sizing: border-box; /*border-box makes height and width to apply to the whole box, not content size*/
    /* other setting is content-box that is default */
}

.box-one {
    background-color: #EB5757;
    padding: 20px;
    height: 150px;
    max-width: 150px;
    /* max-width: 150px; defines the biggest width of the given element, that changes dynamically with window resizing that may be useful for mobile, for example */
    border: 20px solid #9B51E0;
    margin: 15px auto; /*margin defines distance between two elements. Browser takes the largest margin into the account*/
    /* using "margin: Npx auto" with defined width allows centering element horizontally */
    position: relative;
    left: 400px;
    bottom: -900px;
    /* position: relative; with top, right, bottom and left defines new position of the element relative ti its static (default) position */
}


.box-two {
    box-sizing: content-box;
    display: inline-block;
    /* visibility: hidden; */
    /* display: none; makes item disappear from page entirely
    visibility: hidden; makes it hidden, but still loaded on the page*/
    background-color: #2D9CD8;
    border: 20px solid #27AE60;
    padding: 20px;
    height: 150px;
    width: 30%;
    /* width defined with % is dynamic and takes space that is relative to the size of a parent element
    Can be used for layouts */
    margin: 120px 150px 160px 120px; /* "margin:" takes up to four values that allow to set margin on different sides top, right, bottom, left  */
    /* with two or three values it goes: top, right and left, bottom */
}

.box-three {
    box-sizing: content-box;
    display: inline-block; 
    /* interestingly, inline-block elements does not have collapsable margins, only block margins collapse */
    background-color: black;
    color: white;
    border: 20px solid #9aae27;
    padding: 20px;
    height: 150px;
    width: 150px;
    margin: 120px 150px 160px 120px; /* "margin:" takes up to four values that allow to set margin on different sides top, right, bottom, left  */
    /* with two or three values it goes: top, right and left, bottom */
    position: relative;
    /* position: relative;  even without specification (or any other except static) makes this element positioned that allows usage of "position: absolute;" on its child*/
}

.box-three-five {
    font-size: 10px;
    background-color: white;
    color: black;
    padding: 10px;
    width: 50%;
    position: absolute;
    right: 0px;
    /* position: absolute; behaves like fixed but inside another ancestor element that is positioned in any way except "static" */
}

.box-four {
    background-color: #181083;
    padding: 20px;
    height: 150px;
    max-width: 150px;
    /* max-width: 150px; defines the biggest width of the given element, that changes dynamically with window resizing that may be useful for mobile, for example */
    border: 20px solid #20b2d6;
    position: fixed;
    top: 0px;
    left: 0px;
    /* position: fixed; is relative to the point of viewpoint and stays in place when scrolling. Used with top, bottom, left and right */
}

.container {
    margin: 50px;
    border: 3px solid black;
    padding: 8px;
}

.box-five {
    width: 150px;
    height: 150px;
    background-color: black;
    color: white;
    float: left;
    /* float is used to wrap text around an image or element, in our case we use <p> and .box-five inside .container to show wrapping */
}

.box-six {
    width: 150px;
    height: 150px;
    background-color: rgb(38, 0, 173);
    color: white;
    float: left;
    /* float is used to wrap text around an image or element, in our case we use <p> and .box-five inside .container to show wrapping */
}

.cleared {
    clear: left;
    /* clear is user in conjunction with "float" to move element before floated element under it.
    value of clear is determined by the value of floated element (left, right, both) */
}

/* example of a position layout (also responsive with @media */
.position-container {
    position: relative;
    margin: 50px;
    border: 3px solid rgb(11, 107, 32);
    padding: 8px;
}

.box-seven {
    background-color: rgb(6, 173, 0);
    color: rgb(0, 0, 0);
}

.box-eight {
    width: 25%;
    background-color: rgb(170, 173, 0);
    color: rgb(0, 0, 0);
}

.position-container footer {
    position: sticky;
    /* fixed position is relative to a view point and is taken out of a normal page flow
    sticky position stays if the flow and relates to the parent element */
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #181083;
    color: white;
    margin-top: 30px;
}

/* @media is used for responsive design that takes into account external setting of the device used to browse contents of webpages
Here we query about screen width and apply different styling depending on the result of a query */

@media (min-width: 600px) {
    /* alternatively: @media (width >= 600px) */
    .box-seven {
        position: absolute;
        left: 0px;
        width: 25%;
    }
    .box-eight{
        margin-left: 25%;
    }
}

@media (max-width: 599px) {
    /* alternatively: @media (width < 600px) */
    .box-seven {
        display: inline;
    }
}

/* You can create a grid of boxes that fills the browser width and wraps nicely. 
inline-block elements are like inline elements but they can have a width and height.
The combine block and inline elements properties.*/
.inline-box {
    display: inline-block;
    border: 2px solid green;
    width: 200px;
    height: 100px;
    margin: 1em;
}

/* page layout could be created with inline-blocks.
inline-block elements are affected by the vertical-align property, which you probably want set to top.
You need to set the width of each column
There will be a gap between the columns if there is any whitespace between them in the HTML */
.inline-block-container-left, 
.inline-block-container-right {
    border: 3px solid red;
    display: inline-block;
    vertical-align: top;
}

.inline-block-container-left {
    width: 25%;
}

.inline-block-container-right {
    width: 74%;
}

.inline-block-container-right div {
    margin: 1em;
}